{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
    
        "customServerCertificate": {
            "type": "string",
            "defaultValue": "Replace with valid base 64 server cert if enabled",
            "metadata": {
                "description": "Only required if custom certificates are enabled. Custom certificate for the server's TLS connection. The *.CRT file needs to be passed as a base64 encoded string."
            }
        },
        "customServerCertKey": {
            "type": "string",
            "defaultValue": "Replace with valid base 64 server cert key if enabled",
            "metadata": {
                "description": "Only required if custom certificates are enabled. Custom certificate key for the server's TLS connection. The *.KEY file needs to be passed as a base64 encoded string."
            }
        },
        "customServerCertAuthorityBundle": {
            "type": "string",
            "defaultValue": "Replace with valid base 64 public CA bundle cert if enabled",
            "metadata": {
                "description": "Only required if custom certificates are enabled. Custom certificate CA bundle for the server's TLS connection. The *.CRT file needs to be passed as a base64 encoded string."
            }
        },
        "automationSuiteInstallerURL": {
            "type": "string",
            "defaultValue": "None",
            "metadata": {
                "description": "The link to the Automation suite installation package. This will overwrite the Automation Suite version parameter. Please keep the default `None` if not used."
            }
        },
        "automationSuiteAdvancedConfig": {
            "type": "string",
            "defaultValue": "{}",
            "metadata": {
                "description": "This is a valid json string that will be merged in the `cluster_config.json`."
            }
        },
        "serverNodeCount": {
            "defaultValue": 1,
            "allowedValues": [
                1,
                3,
                5,
                7,
                9,
                11,
                13,
                15
            ],
            "minValue": 1,
            "maxValue": 15,
            "type": "int",
            "metadata": {
                "description": "Number of server nodes (? or less). Should be an odd number. If single node ignored?"
            }
        },
        "serverNodeInstanceType": {
            "type": "string",
            "defaultValue": "Standard_D16s_v3",
            "allowedValues": [
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_F16s_v2",
                "Standard_F32s_v2"
            ],
            "metadata": {
                "description": "Instance type of a server node"
            }
        },
        "enableUltraDisks": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                false,
                true
            ],
            "metadata": {
                "description": "Enable to use ultra disks for etcd (server nodes). Should only be disabled if the region you are deploying to does not have zones support."
            }
        },
        "agentNodeCount": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 0,
            "maxValue": 5,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "metadata": {
                "description": "Number of agent nodes (? or less)"
            }
        },
        "agentNodeInstanceType": {
            "type": "string",
            "defaultValue": "Standard_D16s_v3",
            "allowedValues": [
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_F16s_v2",
                "Standard_F32s_v2"
            ],
            "metadata": {
                "description": "Instance type of an agent node"
            }
        },
        "gpuNodeCount": {
            "type": "int",
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 5,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5
            ],
            "metadata": {
                "description": "Number of agent nodes with GPU capabilities (? or less)"
            }
        },
        "gpuNodeInstanceType": {
            "type": "string",
            "defaultValue": "Standard_NC12s_v3",
            "allowedValues": [
                "Standard_NC8as_T4_v3",
                "Standard_NC12s_v3",
                "Standard_NC24s_v3"
            ],
            "metadata": {
                "description": "Instance type of a gpu agent node"
            }
        },
        "taskMiningNodeType": {
            "type": "string",
            "defaultValue": "Standard_D32s_v3",
            "allowedValues": [
                "Standard_F32s_v2",
                "Standard_B20ms",
                "Standard_D32s_v3"
            ],
            "metadata": {
                "description": "OPTIONAL: Instance type of the task mining node. This will only be used if you enable task mining."
            }
        },
        "SQLNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Parameter indicating whether the SQL Server used for the deployment should be created or it's already existing."
            }
        },
        "SQLServerFqdnOrIP": {
            "type": "string",
            "defaultValue": "Replace with valid fqdn or IP existing SQL is selected",
            "metadata": {
                "description": "FQDN or IP associated with the SQL Server. This is only used if the 'SQLNewOrExisting' parameter is set to `existing`"
            }
        },
        "SQLServerUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SQL Server user login. If the 'SQLNewOrExisting' parameter is set to `existing` this is the user for the existing SQL server. Otherwise this username will be set on the SQL server created. Please see this link for permissions: https://docs.uipath.com/automation-suite/docs/multi-node-configuring-ms-sql-server#permissions"
            }
        },
        "SQLServerPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "SQL Server user password. If the 'SQLNewOrExisting' parameter is set to `existing` this is the user password for the existing SQL server. Otherwise this password will be set on the SQL server created."
            }
        },
        "SQLServerPort": {
            "type": "int",
            "defaultValue": 1433,
            "metadata": {
                "description": "SQL Server port. If the 'SQLNewOrExisting' parameter is set to `existing` this port will be used."
            }
        },
        "UipathAdminUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "UiPath Automation Suite User login"
            }
        },
        "UipathAdminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "UiPath Automation Suite User password"
            }
        },
        "vmAdminUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Virtual Machine User login"
            }
        },
        "vmAdminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Virtual Machine User password"
            }
        },
        "enableClusterBackup": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Deploy the external NFS fileshare. The backup will be enabled at cluster level if the parameter Run Automation Suite Install is set to true."
            }
        },
        "actionCenterInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Action Center should be installed."
            }
        },
        "testManagerInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Test Manager should be installed."
            }
        },
        "insightsInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Insights should be installed."
            }
        },
        "dataServiceInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Data Service should be installed."
            }
        },
        "automationHubInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Automation Hub should be installed."
            }
        },
        "automationOpsInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Automation Ops should be installed."
            }
        },
        "appsInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Apps should be installed."
            }
        },
        "aiCenterInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether AI Center should be installed."
            }
        },
        "taskMiningInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Task Mining should be installed."
            }
        },
        "documentUnderstandingInstallFlag": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Flag which determines whether Document Understanding should be installed."
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {}
        }
    },
    "variables": {
        "preValidateTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/preValidate.json",
        "databaseTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/database.json",
        "networkTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/network.json",
        "backupTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/backup.json",
        "computeTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/compute.json",
        "dnsTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/dns.json",
        "vaultTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/vault.json",
        "storageTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/storage.json",
        "postInstallValidationTemplateUri": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/LinkedTemplates/postInstallValidation.json",
        "scriptUris": {
            "validateDeploymentParameters": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/validateDeploymentParameters.ps1",
            "diskResize": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/diskresize.sh",
            "installPrereq": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/installPrereq.sh",
            "installServer": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/installServer.sh",
            "installAgent": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/installAgent.sh",
            "installGpuAgent": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/installGpuAgent.sh",
            "continueInstallGpuAgent": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/continueInstallGpuAgent.sh",
            "continueInstallServer": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/continueInstallServer.sh",
            "validateFullInstall": "https://download.uipath.com/templates/AutomationSuite/Azure/2022.4.0/scripts/validateFullInstall.sh"
        },
        "URLFromVersion": "[concat('https://download.uipath.com/automation-suite/', '2022.4.0','/installer-','2022.4.0','.zip')]",
        "automationSuiteInstallerURL": "[if(equals(parameters('automationSuiteInstallerURL'), 'None'),variables('URLFromVersion'), parameters('automationSuiteInstallerURL'))]",
        "baseName": "[substring([concat('u',uniqueString(resourceGroup().id, deployment().name))], 0, 5)]",
        "preChecksDeploymentName": "[concat('PreChecks-',substring(uniqueString(variables('baseName')),0,6))]",
        "vaultDeploymentName": "[concat('Vault-',substring(uniqueString(variables('baseName')),0,6))]",
        "storageDeploymentName": "[concat('Storage-',substring(uniqueString(variables('baseName')),0,6))]",
        "postInstallValidationDeploymentName": "[concat('PostInstallValidation-',substring(uniqueString(variables('baseName')),0,6))]",
        "networkDeploymentName": "[concat('Network-',substring(uniqueString(variables('baseName')),0,6))]",
        "backupDeploymentName": "[concat('Backup-',substring(uniqueString(variables('baseName')),0,6))]",
        "dnsDeploymentName": "[concat('DNS-',substring(uniqueString(variables('baseName')),0,6))]",
        "databaseDeploymentName": "[concat('Database-',substring(uniqueString(variables('baseName')),0,6))]",
        "computeDeploymentName": "[concat('Compute-',substring(uniqueString(variables('baseName')),0,6))]",
        "certificateConfig": {
            "enableCustomCertificates": "[bool('false')]",
            "customServerCertificate": "[parameters('customServerCertificate')]",
            "customServerCertKey": "[parameters('customServerCertKey')]",
            "customServerCertAuthorityBundle": "[parameters('customServerCertAuthorityBundle')]"
        },
        "enabledServices": {
            "sharedSuite": {
                "flag": true,
                "eval": {
                    "core": 14.3,
                    "ram": 8900
                },
                "ha": {
                    "core": 11,
                    "ram": 27000
                }
            },
            "orchestrator": {
                "flag": true,
                "eval": {
                    "core": 2.6,
                    "ram": 3100
                },
                "ha": {
                    "core": 2.6,
                    "ram": 5000
                }
            },
            "actionCenter": {
                "flag": "[parameters('actionCenterInstallFlag')]",
                "eval": {
                    "core": 1,
                    "ram": 2400
                },
                "ha": {
                    "core": 2,
                    "ram": 4000
                }
            },
            "apps": {
                "flag": "[parameters('appsInstallFlag')]",
                "eval": {
                    "core": 2.325,
                    "ram": 7100
                },
                "ha": {
                    "core": 7.25,
                    "ram": 18000
                }
            },
            "automationHub": {
                "flag": "[parameters('automationHubInstallFlag')]",
                "eval": {
                    "core": 0.9,
                    "ram": 1100
                },
                "ha": {
                    "core": 1.9,
                    "ram": 3000
                }
            },
            "taskMining": {
                "flag": "[parameters('taskMiningInstallFlag')]",
                "eval": {
                    "core": 4.2,
                    "ram": 5000
                },
                "ha": {
                    "core": 8,
                    "ram": 9276
                }
            },
            "documentUnderstanding": {
                "flag": "[parameters('documentUnderstandingInstallFlag')]",
                "eval": {
                    "core": 1.5,
                    "ram": 2500
                },
                "ha": {
                    "core": 8.2,
                    "ram": 18000
                }
            },
            "insights": {
                "flag": "[parameters('insightsInstallFlag')]",
                "eval": {
                    "core": 1.5,
                    "ram": 4900
                },
                "ha": {
                    "core": 1.5,
                    "ram": 4900
                }
            },
            "automationOps": {
                "flag": "[parameters('automationOpsInstallFlag')]",
                "eval": {
                    "core": 0.4,
                    "ram": 900
                },
                "ha": {
                    "core": 0.7,
                    "ram": 1710
                }
            },
            "testManager": {
                "flag": "[parameters('testManagerInstallFlag')]",
                "eval": {
                    "core": 0.3,
                    "ram": 400
                },
                "ha": {
                    "core": 1,
                    "ram": 2056
                }
            },
            "aiCenter": {
                "flag": "[parameters('aiCenterInstallFlag')]",
                "eval": {
                    "core": 2.4,
                    "ram": 6000
                },
                "ha": {
                    "core": 4.8,
                    "ram": 13000
                }
            },
            "dataService": {
                "flag": "[parameters('dataServiceInstallFlag')]",
                "eval": {
                    "core": 0.33,
                    "ram": 612
                },
                "ha": {
                    "core": 0.44,
                    "ram": 840
                }
            }
        },
        "existingSQL": "[if(equals(parameters('SqlNewOrExisting'), 'existing'), true(), false())]"
    },
    "functions": [],
    "resources": [
        {
            "apiVersion": "2020-06-01",
            "name": "pid-4b8f227e-0b51-475b-8c51-d8c2c5b92b39",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "name": "[variables('preChecksDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('preValidateTemplateUri')]"
                },
                "parameters": {
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "virtualNetworkNewOrExisting": {
                        "value": "new"
                    },
                    "existingVirtualNetworkResourceGroup": {
                        "value": ""
                    },
                    "existingVirtualNetworkName": {
                        "value": ""
                    },
                    "certificateConfig": {
                        "value": "[variables('certificateConfig')]"
                    },
                    "enabledServices": {
                        "value": "[variables('enabledServices')]"
                    },
                    "serverNodeInstanceType": {
                        "value": "[parameters('serverNodeInstanceType')]"
                    },
                    "agentNodeInstanceType": {
                        "value": "[parameters('agentNodeInstanceType')]"
                    },
                    "gpuNodeInstanceType": {
                        "value": "[parameters('gpuNodeInstanceType')]"
                    },
                    "taskMiningNodeType": {
                        "value": "[parameters('taskMiningNodeType')]"
                    },
                    "serverNodeCount": {
                        "value": "[parameters('serverNodeCount')]"
                    },
                    "agentNodeCount": {
                        "value": "[parameters('agentNodeCount')]"
                    },
                    "gpuNodeCount": {
                        "value": "[parameters('gpuNodeCount')]"
                    },
                    "installTaskMining": {
                        "value": "[parameters('taskMiningInstallFlag')]"
                    },
                    "scriptUris": {
                        "value": "[variables('scriptUris')]"
                    },
                    "msiName": {
                        "value": "[concat(variables('baseName'),'-msi')]"
                    },
                    "fqdn": {
                        "value": "[concat('u',uniqueString(resourceGroup().id, deployment().name))]"
                    },
                    "acceptLicenseAgreement": {
                        "value": true
                    },
                    "actionCenterInstallFlag": {
                        "value": "[parameters('actionCenterInstallFlag')]"
                    },
                    "testManagerInstallFlag": {
                        "value": "[parameters('testManagerInstallFlag')]"
                    },
                    "insightsInstallFlag": {
                        "value": "[parameters('insightsInstallFlag')]"
                    },
                    "dataServiceInstallFlag": {
                        "value": "[parameters('dataServiceInstallFlag')]"
                    },
                    "automationHubInstallFlag": {
                        "value": "[parameters('automationHubInstallFlag')]"
                    },
                    "automationOpsInstallFlag": {
                        "value": "[parameters('automationOpsInstallFlag')]"
                    },
                    "appsInstallFlag": {
                        "value": "[parameters('appsInstallFlag')]"
                    },
                    "aiCenterInstallFlag": {
                        "value": "[parameters('aiCenterInstallFlag')]"
                    },
                    "taskMiningInstallFlag": {
                        "value": "[parameters('taskMiningInstallFlag')]"
                    },
                    "documentUnderstandingInstallFlag": {
                        "value": "[parameters('documentUnderstandingInstallFlag')]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('vaultDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('preChecksDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vaultTemplateUri')]"
                },
                "parameters": {
                    "SQLServerUsername": {
                        "value": "[parameters('SQLServerUsername')]"
                    },
                    "SQLServerPassword": {
                        "value": "[parameters('SQLServerPassword')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('UiPathAdminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('UiPathAdminPassword')]"
                    },
                    "vmAdminUsername": {
                        "value": "[parameters('vmAdminUsername')]"
                    },
                    "vmAdminPassword": {
                        "value": "[parameters('vmAdminPassword')]"
                    },
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('databaseDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(variables('existingSQL'))]",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('networkDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('vaultDeploymentName'))]"
            ],
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('databaseTemplateUri')]"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "SQLServerName": {
                        "value": "[concat(substring([concat('u',uniqueString(resourceGroup().id, deployment().name))],0,4),'sql')]"
                    },
                    "SQLServerAdminLogin": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "SQLServerUsername"
                        }
                    },
                    "SQLServerAdminPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "SQLServerPassword"
                        }
                    },
                    "dbNames": {
                        "value": "[reference(variables('preChecksDeploymentName')).outputs.dbNames.value]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('networkDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('preChecksDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('networkTemplateUri')]"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "dnsLoadBalancer": {
                        "value": "[concat('u',uniqueString(resourceGroup().id, deployment().name))]"
                    },
                    "createNewVnet": {
                        "value": "[bool('true')]"
                    },
                    "existingVirtualNetworkName": {
                        "value": ""
                    },
                    "existingVirtualNetworkResourceGroup": {
                        "value": ""
                    },
                    "existingSubnetName": {
                        "value": ""
                    },
                    "deployBastionHost": {
                        "value": "[bool('true')]"
                    },
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "enableClusterBackup": {
                        "value": "[parameters('enableClusterBackup')]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('backupDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "condition": "[parameters('enableClusterBackup')]",
            "apiVersion": "2019-10-01",
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('networkDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('backupTemplateUri')]"
                },
                "parameters": {
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "subnetId": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.subnetId.value]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('storageDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('preChecksDeploymentName'))]"
            ],
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageTemplateUri')]"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('computeDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('databaseDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('vaultDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('storageDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('dnsDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments',variables('backupDeploymentName'))]"
            ],
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('computeTemplateUri')]"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "certificateConfig": {
                        "value": "[variables('certificateConfig')]"
                    },
                    "subnetId": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.subnetId.value]"
                    },
                    "ILBIp": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.privateLoadBalancerIpAddress.value]"
                    },
                    "serverNodeCount": {
                        "value": "[parameters('serverNodeCount')]"
                    },
                    "agentNodeCount": {
                        "value": "[parameters('agentNodeCount')]"
                    },
                    "gpuNodeCount": {
                        "value": "[parameters('gpuNodeCount')]"
                    },
                    "serverNodeInstanceType": {
                        "value": "[parameters('serverNodeInstanceType')]"
                    },
                    "enableUltraDisks": {
                        "value": "[parameters('enableUltraDisks')]"
                    },
                    "agentNodeInstanceType": {
                        "value": "[parameters('agentNodeInstanceType')]"
                    },
                    "gpuNodeInstanceType": {
                        "value": "[parameters('gpuNodeInstanceType')]"
                    },
                    "taskMiningNodeType": {
                        "value": "[parameters('taskMiningNodeType')]"
                    },
                    "serverZones": {
                        "value": "[reference(variables('preChecksDeploymentName')).outputs.serverZones.value]"
                    },
                    "agentZones": {
                        "value": "[reference(variables('preChecksDeploymentName')).outputs.agentZones.value]"
                    },
                    "gpuZones": {
                        "value": "[reference(variables('preChecksDeploymentName')).outputs.gpuZones.value]"
                    },
                    "isZoneResilient": {
                        "value": "[reference(variables('preChecksDeploymentName')).outputs.isZoneResilient.value]"
                    },
                    "baseName": {
                        "value": "[variables('baseName')]"
                    },
                    "vmAdminUserName": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "vmAdminUsername"
                        }
                    },
                    "vmAdminPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "vmAdminPassword"
                        }
                    },
                    "adminUserName": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "UiPathAdminUsername"
                        }
                    },
                    "adminPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "UiPathAdminPassword"
                        }
                    },
                    "argoCDPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "argoCDPassword"
                        }
                    },
                    "argoCDUserPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "argoCDUserPassword"
                        }
                    },
                    "actionCenterInstallFlag": {
                        "value": "[parameters('actionCenterInstallFlag')]"
                    },
                    "testManagerInstallFlag": {
                        "value": "[parameters('testManagerInstallFlag')]"
                    },
                    "insightsInstallFlag": {
                        "value": "[parameters('insightsInstallFlag')]"
                    },
                    "dataServiceInstallFlag": {
                        "value": "[parameters('dataServiceInstallFlag')]"
                    },
                    "automationHubInstallFlag": {
                        "value": "[parameters('automationHubInstallFlag')]"
                    },
                    "automationOpsInstallFlag": {
                        "value": "[parameters('automationOpsInstallFlag')]"
                    },
                    "appsInstallFlag": {
                        "value": "[parameters('appsInstallFlag')]"
                    },
                    "aiCenterInstallFlag": {
                        "value": "[parameters('aiCenterInstallFlag')]"
                    },
                    "taskMiningInstallFlag": {
                        "value": "[parameters('taskMiningInstallFlag')]"
                    },
                    "documentUnderstandingInstallFlag": {
                        "value": "[parameters('documentUnderstandingInstallFlag')]"
                    },
                    "RunAutomationSuiteInstall": {
                        "value": true
                    },
                    "clusterFQDN": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.loadBalancerFQDN.value]"
                    },
                    "sqlFQDN": {
                        "value": "[if(variables('existingSQL'),parameters('sqlServerFqdnOrIP'),reference(variables('databaseDeploymentName')).outputs.SQLFQDN.value)]"
                    },
                    "SQLServerPort": {
                        "value": "[if(variables('existingSQL'),parameters('SQLServerPort'),1433)]"
                    },
                    "SQLServerAdminLogin": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "SQLServerUsername"
                        }
                    },
                    "SQLServerAdminPassword": {
                        "reference": {
                            "keyVault": {
                                "id": "[reference(variables('vaultDeploymentName')).outputs.KVResourceId.value]"
                            },
                            "secretName": "SQLServerPassword"
                        }
                    },
                    "existingSQL": {
                        "value": "[variables('existingSQL')]"
                    },
                    "storageAccountName": {
                        "value": "[reference(variables('storageDeploymentName')).outputs.storageAccountName.value]"
                    },
                    "containerName": {
                        "value": "[reference(variables('storageDeploymentName')).outputs.containerName.value]"
                    },
                    "scriptUris": {
                        "value": "[variables('scriptUris')]"
                    },
                    "automationSuitePackage": {
                        "value": "[variables('automationSuiteInstallerURL')]"
                    },
                    "automationSuiteACRJson": {
                        "value": "[parameters('automationSuiteAdvancedConfig')]"
                    },
                    "enableClusterBackup": {
                        "value": "[parameters('enableClusterBackup')]"
                    },
                    "fileshareEndpoint": {
                        "value": "[if(parameters('enableClusterBackup'), reference(variables('backupDeploymentName')).outputs.fileshareEndpoint.value, 'none')]"
                    },
                    "fileshareMountpath": {
                        "value": "[if(parameters('enableClusterBackup'), reference(variables('backupDeploymentName')).outputs.fileshareMountpath.value, 'none')]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('postInstallValidationDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "condition": true,
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('computeDeploymentName'))]"
            ],
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('postInstallValidationTemplateUri')]"
                },
                "parameters": {
                    "location": {
                        "value": "[resourceGroup().location]"
                    },
                    "storageAccountName": {
                        "value": "[reference(variables('storageDeploymentName')).outputs.storageAccountName.value]"
                    },
                    "containerName": {
                        "value": "[reference(variables('storageDeploymentName')).outputs.containerName.value]"
                    },
                    "publicLoadBalancerIP": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.loadBalancerPublicIpAddress.value]"
                    },
                    "clusterFQDN": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.loadBalancerFQDN.value]"
                    },
                    "customCertificate": {
                        "value": "'installer-generated'"
                    },
                    "scriptUris": {
                        "value": "[variables('scriptUris')]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        },
        {
            "name": "[variables('dnsDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('networkDeploymentName'))]"
            ],
            "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Resources/deployments'), parameters('tagsByResource')['Microsoft.Resources/deployments'], json('{}')) ]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dnsTemplateUri')]"
                },
                "parameters": {
                    "vnetId": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.vnetId.value]"
                    },
                    "privateLoadBalancerIpAddress": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.privateLoadBalancerIpAddress.value]"
                    },
                    "clusterFQDN": {
                        "value": "[reference(variables('networkDeploymentName')).outputs.loadBalancerFQDN.value]"
                    },
                    "tagsByResource": {
                        "value": "[parameters('tagsByResource')]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "Documentation": {
            "type": "string",
            "value": "https://docs.uipath.com/automation-suite/docs/automation-suite-overview"
        },
        "URL": {
            "type": "string",
            "value": "[concat('https://',reference(variables('networkDeploymentName')).outputs.loadBalancerFQDN.value)]"
        },
        "keyVaultURL": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/resource', reference(variables('vaultDeploymentName')).outputs.KVResourceId.value)]"
        },
        "ArgoCDURL": {
            "type": "string",
            "value": "[concat('https://alm.',reference(variables('networkDeploymentName')).outputs.loadBalancerFQDN.value)]"
        },
        "ArgoCDPasswordSecretURL": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/asset/Microsoft_Azure_KeyVault/Secret/',reference(variables('vaultDeploymentName')).outputs.argoCDPasswordSecretURL.value)]"
        },
        "ArgoCDUserPasswordSecretURL": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/asset/Microsoft_Azure_KeyVault/Secret/',reference(variables('vaultDeploymentName')).outputs.argoCDUserPasswordSecretURL.value)]"
        },
        "HostAdminUsernameSecretURL": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/asset/Microsoft_Azure_KeyVault/Secret/',reference(variables('vaultDeploymentName')).outputs.adminUsernameSecretURL.value)]"
        },
        "HostAdminPasswordSecretURL": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/asset/Microsoft_Azure_KeyVault/Secret/',reference(variables('vaultDeploymentName')).outputs.adminPasswordSecretURL.value)]"
        }
    }
}
